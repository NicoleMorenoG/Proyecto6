openapi: 3.0.3
info:
  title: Proyecto 6 - API Backend con Autenticación
  version: 1.0.0
  description: |
    API con autenticación JWT, modelo de Usuario y Producto (CRUD).
    **Rutas base**:
      - /api/user
      - /api/product
servers:
  - url: http://localhost:5000

tags:
  - name: User
  - name: Product

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:    { type: string, example: Nico }
        email:   { type: string, example: nico@example.com }
        password:{ type: string, example: 123456 }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:   { type: string, example: nico@example.com }
        password:{ type: string, example: 123456 }
    AuthResponse:
      type: object
      properties:
        message: { type: string, example: Login exitoso }
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Product:
      type: object
      properties:
        id:         { type: string }
        name:       { type: string }
        description:{ type: string }
        price:      { type: number, example: 29990 }
        user:
          type: object
          properties:
            id: { type: string }
            name: { type: string }
            email: { type: string }
        createdAt:  { type: string, format: date-time }
        updatedAt:  { type: string, format: date-time }
    ProductCreateRequest:
      type: object
      required: [name, price]
      properties:
        name:        { type: string, example: Anillo Aura }
        description: { type: string, example: Plata y amatista }
        price:       { type: number, example: 29990 }

paths:
  /api/user/register:
    post:
      tags: [User]
      summary: Registrar usuario
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400': { description: Campos faltantes }
        '409': { description: Email ya registrado }

  /api/user/login:
    post:
      tags: [User]
      summary: Login de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400': { description: Campos faltantes }
        '401': { description: Credenciales inválidas }

  /api/user/verifytoken:
    get:
      tags: [User]
      summary: Verificar token vigente
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Token válido }
                  user: { $ref: '#/components/schemas/User' }
        '401': { description: No autorizado }

  /api/user/update:
    put:
      tags: [User]
      summary: Actualizar perfil del usuario autenticado
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Perfil actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Perfil actualizado }
                  user: { $ref: '#/components/schemas/User' }
        '401': { description: No autorizado }
        '409': { description: Email ya registrado }

  /api/product/create:
    post:
      tags: [Product]
      summary: Crear producto (requiere login)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreateRequest' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Producto creado }
                  product: { $ref: '#/components/schemas/Product' }
        '400': { description: Datos inválidos }
        '401': { description: No autorizado }

  /api/product/readall:
    get:
      tags: [Product]
      summary: Listar productos
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: minPrice
          schema: { type: number }
        - in: query
          name: maxPrice
          schema: { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
        '401': { description: No autorizado }

  /api/product/readone/{id}:
    get:
      tags: [Product]
      summary: Obtener producto por ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product: { $ref: '#/components/schemas/Product' }
        '401': { description: No autorizado }
        '404': { description: No encontrado }

  /api/product/update/{id}:
    put:
      tags: [Product]
      summary: Actualizar producto por ID (dueño)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:        { type: string }
                description: { type: string }
                price:       { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Producto actualizado }
                  product: { $ref: '#/components/schemas/Product' }
        '401': { description: No autorizado }
        '403': { description: Sin permiso }
        '404': { description: No encontrado }

  /api/product/delete/{id}:
    delete:
      tags: [Product]
      summary: Eliminar producto por ID (dueño)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Producto eliminado }
        '401': { description: No autorizado }
        '403': { description: Sin permiso }
        '404': { description: No encontrado }
